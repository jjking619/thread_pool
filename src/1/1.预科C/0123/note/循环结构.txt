0.问题的引入
    比如:
        求一个100内所有整数的和
        int sum = 1 + 2 + 3 + 4 .... + 100;

        int sum = 0;
        int i = 1;

        sum = sum + i;
        i++;//2

        sum = sum + i;
        i++;
        ....

        如果上面这个语句重复一百次的话,不科学
            我们想让计算机来帮我们做重复的事情
        
        循环 
            循环的本质就是重复,所有重复的代码都可以用循环实现
        
        在C语言中,能够实现循环效果的语句;
            goto
            for()
            while()
            do while()

1.goto语句
    go to bed 
    go to netbar
    goto   去哪
    
    goto是无条件跳转的语句,让CPU去指定的地方执行下一条语句

    语法:
        行标识符(语句标识):
            ...
            goto 行标识符;

        "行标识符":C语言合法标识符,用来标记某一行
                一般是出现在一行的最前面,允许航标符号前面有空白符

    例子:
        求100以内所有整数之和

        循环的本质--->重复  ====> 要找到这个重复的代码段
        int i = 1;
        int sum = 0;

        sum += i;0+1
        i++;i-->2

        sum += i;1+2
        i++;i-->3

        ...
        找到了这个重复的代码之后呢,我们就确定好了我们的循环语句
        int main()
        {
            int sum = 0;
            int i = 1;

            loop:   //行标识符 
                sum += i;
                i++;
                //要加一个条件能够跳出循环===>满足一个条件进入循环,不满足了就跳出循环
                if(i <= 100)
                {
                    goto loop;
                }
            
            printf("%d\n",sum);
                
        }
        
        实现循环的两个关键:
            (1)找到循环体语句,根据题目的要求来找到重复的代码
            (2)要找到跳出循环的条件,次数不能多也不能少
            (3)goto语句一般是和if语句一起使用的,避免死循环的出现

    注意:
        goto语句本身是没有问题的,使用的时候可能会出问题,因为goto是一个
        无条件跳转,会导致程序的整体性被破坏,可读性比较差,大家一般要限制使用

    
    练习:
        1.计算100以内奇数之和
            条件:
                100以内 :运算的范围 
                奇数的和:所需要加进来的数

            S1:int sum = 0;
                int i = 0;

                if(i%2 == 1)    //奇数
                {
                    sum = sum+i;
                }
                i++;//1

                if(i%2 == 1)
                {
                    sum = sum+i;
                }
                i++;
                ...
                一直重复上面哪个代码
                直到i大于100了就跳出循环了 ===> 只要i <= 100 就继续进行操作

            代码实现:
                int main()
                {
                    int sum = 0;
                    int i = 0;

                    loop:
                        if(i%2 == 1)
                        {
                            sum = sum+i;
                        }
                        i++; 
                        //满足条件才进入循环
                        if(i <= 100)
                        {
                            goto loop;
                        }

                    printf("%d\n",sum);

                    return 0;
                }


        2.求100以内所有3的倍数之和
            条件:
                范围:100以内
                加数:3的倍数

                int sum = 0;
                int i = 0;

                if(i%3 == 0)
                {
                    sum = sum+i;
                }
                i++;//可以卡一个bug,0是3的倍数,每次加3

                if(i%3 == 0)
                {
                    sum = sum + i;
                }
                i++;
                ....
                直到i大于100了就跳出循环了

        代码实现:
            int main()
            {
                int sum = 0;
                int i = 0;

                loop:
                    if(i%3 == 0)
                    {
                        sum = sum+i;
                    }
                    i++;
                    if(i <= 100)
                    {
                        goto loop;
                    }  

                printf("%d\n",sum);

                return 0; 
            }


2.while语句
    语法:
        while(表达式)
        {
            循环体语句;
        }

        先判断表达式的值,如果表达式的值为真(非0),那么就会去执行循环体语句,
        执行完之后,又会重新判断表达式的值,一直判断,直到表达式的值为假(0)
        则退出我们循环,并且不再执行循环提语句
        "表达式": C语言合法表达式都可以 
        "语句":单语句或者复合语句都可以 建议:写{}


    例子:
        求一百以内所有整数的和
            int sum = 0;
            int i = 1;
            while(i <= 100)
                sum = sum+i;    //卡在这里死循环了
                i++;

            --->
                while(i <= 100)
                {
                    sum = sum+i;
                    i++;
                }

    练习:
        1)用while循环实现 逆序输出一个非负整数 int
            1234  --->  4 3 2 1
            123321  ---> 1 2 3 3 2 1

            两种方法:
            
            方法1:
                输入的是一个整数
                12345
                输出的时候,我可以不一定输出一个数
                先输出 个位 在输出 十位 再输出百位...

                S1:
                    a = 12345
                    an = a%10 ---> 5
                    //输出 
                    //输出了个位之后就没用了,可不可以把它砍掉,把原来的十位变成个位
                    "砍掉" --- > 取整
                    a = a/10;//1234

                    an = a%10;//4
                    //输出
                    a = a/10;//123


                    ...
                    a = a/10;1/10 ---> 0
                    当a == 0的时候就没必要继续下去了


            代码实现:
                int main()
                {
                    int a;
                    printf("请输入您要操作的这个数:\n");
                    scanf("%d",&a);
                    int an;//保存每次取余的余数

                    while(a)//当a不等于0的时候就进入的循环
                    {
                        an = a%10;//取出我们的个位数
                        printf("%d ",an);
                        a = a/10;//a进行取整 当a == 0的时候不进入循环
                    }
                    printf("\n");
                    return 0;
                }

                //方法二,输出一个数来
                int main()
                {
                    int a;
                    printf("请输入您要操作的这个数:\n");
                    scanf("%d",&a);
                    int new_a = 0;
                    int an;//保存每次取余的余数

                    while(a)//当a不等于0的时候就进入的循环
                    {
                        an = a%10;//取出我们的个位数
                        new_a = new_a*10 + an;//每次确保我们这个数能够大一位(个十百千这个位)
                        a = a/10;//a进行取整 当a == 0的时候不进入循环
                    }
                    printf("%d\n",new_a);
                    return 0;
                }

3.do while()语句 
    语法:
        do
        {
            循环体语句;
        }while(表达式);

        首先,无条件的先执行一次循环体语句,再去判断这个表达式的值
            如果表达式的值为真(非0),那么就继续执行"循环体语句",执行完了之后
            又去判断表达式的值.....
            直到表达式的值为假,那么就退出循环
        
        "表达式":C语言的合法表达式都可以
        "语句":单语句和复合语句都可以,建议:写{}

    例子:
        求100之内, 所有3的倍数的和
            条件:
                范围是100以内
                加数是3的倍数的和

                int sum = 0;
                int i = 0;
                循环体语句:
                    if(i%3 == 0)
                    {
                        sum = sum + i;
                    }

                    i++

                do
                {
                    if(i%3 == 0)
                    {
                        sum = sum + i;
                    }
                    i++;
                }while(i <= 100);
    
    注意;
        1)do和while必须成对出现
        2)do后面的语句不管是一个单语句还是复合语句
            复合语句:
                if() switch() while() goto for()

            所以花括号一定要打上
        3)不管条件满不满足,do while()都会先执行一次,千万别忘了

    
    练习:
        用do while来实现求n的阶乘

        0! = 1
        1! = 1
        2! = 2 * 1
        3! = 3 * 2 * 1
        ...
        n! = (n-1)!*n   => n * (n-1) * (n-2) * ... *1

        反过来的一个思路:
            可以从1一直乘到n
            int n;//从键盘输入 
            //S1:判断它是0或者是1 直接输出值 1
            //S2:如果不是1的话,那么我们就从1开始乘到n
            int i = 1;
            long s = 1;//考虑到数字会很大
                s = s * i;
                i++;
                //在什么情况下,继续执行上面那部分?
                当i <= n的时候,循环体语句就会继续
                s = s * i;
                i++;
                .....
                直到i > n的时候,跳出循环

        代码实现:
            long s = 1;//定义结果
            int n;
            scanf("%d",&n);
            int i = 1;

            //判断它是0或者是1
            if(n == 0 || n == 1)
            {
                printf("%d! = 1",n);
                return 0;//让主函数在这里就结束了
            }

            //现在n不是0或者1
            do
            {
                s = s * i;
                i++;    
            }while(i <= n);
            printf("%d! = %d",n,s);

            return 0;

        算法:
            基础算法,从实际出发,引出自然语言,再引入思路,再用代码简化思路


4.for()语句 
    语法:
        for(表达式1;表达式2;表达式3)
        {
            循环体语句;
        }
        首先,无条件执行表达式1(只执行一次),再去判断"表达式2"的值    
            如果"表达式2"的值为真(非0),那么就会去执行"循环体语句",
            执行完了之后,再去执行"表达式3",一次循环就是这么一个流程
        从第二次循环开始,"表达式1"就不会再被执行了,会直接去判断"表达式2"
        的值
        如果值为真,就继续执行语句,执行表达式3.....\
        如果值为假,那么就会直接退出循环

        for循环可以等价于while循环
        for(表达式1;表达式2;表达式3)
        {
            循环体语句;
        }

        ===>等价于

        表达式1;
        while(表达式2)
        {
            循环体语句;
            表达式3;
        }

        注意:
            1)for循环的表达式1,表达式2,表达式3都是可以省略,如果表达式2为空,那么这就是一个
                死循环
                    for(;;) ===> while(1)

            2)while循环和for循环的区别,
                while更加注重循环的条件
                for循环更加注重循环的次数

    练习:
        1)打印"水仙花数"
            水仙花数:
                一个三位数,每一位上面的这个数字的立方加在一起的和等于它本身
                abc = a*a*a + b*b*b + c*c*c;

                范围:[100,999]
                条件:每一位上面的这个数字的立方加在一起的和等于它本身

                S1:定义一个变量n.查找[100,999]
                    个位,十位,百位
                    我们要想办法取出这三个位上的数字
                    int g,s,b;
                    取个位:n%10;
                    取十位:n/10%10;  123/10 -> 12  12%10 - > 2
                    取百位:n/100;

                代码实现:
                    int g,s,b;
                    int n;//[100,999]
                    for(n = 100;n <= 999;n++)
                    {
                        //每次都要取个位 十位 百位
                        g = n%10; 
                        s = n/10%10;
                        b = n/100;
                        if((g*g*g + b*b*b + s*s*s) == n)
                        {
                            printf("%d\n",n);
                        }
                    }
                    return 0;


        2)从键盘上输入一个数,判断它是不是一个质数(素数)
            质数:除了1和它本身,没有其它的因数
                假设一个数是 n
                    在[2,n-1]的范围内进行查找,看有没有他的因数

            思路:一个数除了1和它本身,最大的因数 <= 这个数的一半

                确定了因数查找的范围[2,n/2]

                使用循环进行查找
                for(i = 2;i <= n/2;i++)
                {
                    //只要找到了一个数是n的因数 n%i == 0
                    //那么该数不是一个质数

                    //若全部都找完了,也没有他的因数,那么就是一个素数

                }                
                "标志位"
                    flag = 1;//是质数

                    当找到了一个数是n的因数
                    就让flag 变成0   //不是质数      

            代码实现:
                int flag = 1;//标志位 1是一个质数 0不是一个质数

                int n;//每次判断的那一个数
                scanf("%d",&n);
                if(n == 2)
                {
                    printf("%d是质数\n",n);
                    return 0;
                }     
                int i;//判断它是不是n的质数
                for(i = 2;i <= n-1;i++)
                {
                    if(n % i == 0)//找到另外一个因数
                    {
                        flag = 0;
                        break;//跳出循环 
                    }
                }

                //判断标志位
                if(flag == 1)
                {
                    printf("%d是质数\n",n);
                }
                else
                {
                    printf("%d不是质数\n",n);
                }

5.break和continue
    1)break语句 只能用在switch和循环语句(for/while/do while)中
        break语句在switch语句中的作用,跳出它所在的switch语句
        break语句在循环语句中的作用,用来跳出所在循环

    2)continue只能用在循环语句中
        用来结束本次循环,开始下一次循环

    例子:
        打印0-20以内,不是3的倍数的数

        int i;
        for(i = 0;i < 20;i++)
        {
            if(i % 3 == 0)
            {
                continue;
            }
            printf("%d\n",i);
        }

6.循环的嵌套
    主要是要知道循环的次数
    int i,j,count;
    for(i = 0;i < 3;i++)
    {
        for(j = 0;j < 4;j++)
        {
            count++;
        }
    }

    count = 12

    一般的来说,循环次数 = 外循环次数 * 内循环次数;


作业:
    1.求1000以内的完数
        完数:这个数除去它自己本身,所有因子之和等于它本身
        比如:
            6:1 2 3 
                1 + 2 + 3 = 6

        S1:
            从1找到1000
            循环实现:for(i = 1;i <= 1000;i++)
        S2:
            每次找一个数,就把他的所有因数之和加起来
            int sum = 0;
            找i的所有因数  --> [1,i/2]
        S3:
            判断这个数和它的因数之和是否相等
                i == sum?
        S4:
            如果相等,就把这个数打印出来
                打印i 

        代码实现:
            int i;//要判断的那个数
            int j;//用来找i的因数
            int sum = 0;//每次的因数之和
            for(i = 1;i <= 1000;i++)
            {
                sum = 0;//每次判断一个新的数字的时候,sum都要清0
                for(j = 1;j <= i/2;j++)
                {
                    if(i % j == 0)//j是i的因数
                    {
                        sum += j;
                    }
                }//要所有的因数之和都求出来了才进行比较
                if(sum == i)
                {
                    printf("%d\n",i);
                }
             
            }



    2.从键盘上输入两个整数,求最小公倍数,最大公约数
        最大公约数 
            [1,min(m,n)]
        最小公倍数
            [max(m,n),m*n]
        思路:
            最大公约数 
                假设x是 m和n的公约数
                    m%x == 0 && n%x == 0
                范围:
                    [1,min(m,n)]
                思路:
                    假设从min(m,n)往小了去找
                    找到的第一个公约数就是最大公约数
            
                最小公倍数 
                    假设y是m和n的公倍数
                        y%m == 0 && y%n == 0
                    范围:
                        [max(m,n),m*n]
                思路:
                    假设从max(m,n)往大了去找
                    找到的第一个公倍数就是最小公倍数


        代码实现:
            int m,n;//从键盘输入的两个数
            scanf("%d%d",&m,&n);

            int x,y;//x就是最大公约数 y是最小公倍数

            //最大公约数,x一开始等于两个中小的那一个
            for(x=(m>n? n:m);x>=1;x--)
            {
                if((m%x == 0) && (n%x == 0))
                {
                    printf("最大公约数为%d\n",x);
                    break;
                }
            }

            //最小公倍数,y一开始等于两个中大的那一个
            for(y=(m>n? m:n);y <= m*n;y++)
            {
                if((y%m == 0) && (y%n == 0))
                {
                    printf("最小公约数为%d\n",y);
                    break;
                }
            }


    3.一个正整数有可能是由n个连续的数相加得来的(选做)
        比如:
            15 = 1+2+3+4+5
            15 = 4 + 5 + 6
            15 = 7 + 8

        从键盘上输入一个数n,找出所有有可能的情况

        算法一:
            穷举法(暴力破解法):
                    先从1开始去累加,
                        如果小于这个数,继续累加下一个数
                        如果等于这个数,刚好输出
                        如果大于这个数,从下一次开始加
                        1不行从2开始...
            以15为例子
                1
                1+2
                1+2+3
                1+2+3+4
                1+2+3+4+5 == 15
                
                以2开头
                2
                2+3
                2+3+4
                2+3+4+5
                2+3+4+5+6  >15 不满足 从下一次开始 

                ....
                n/2
                n/2 + n/2+1  === 15

                n/2+1 
                n/2+1 + n/2+2 == n + 3

                可能由连续相加的一个范围
                [1,n/2]

            代码实现:
                int n;
                scanf("%d",&n);

                int sum = 0;//求连续序列之和,需要重新赋值

                int i,j,k;//i是表示从i开始找序列,j每次保存i的值,开始加,k就是找到了复合条件的序列,帮助打印
                for(i = 1;i <= n/2;i++)
                {
                    sum = 0;//每次sum重新清0
                    for(j = i;sum <= n;j++)
                    {
                        sum = sum + j;
                        if(sum == n)//找到了所需要的序列
                        {
                            //打印出结果 
                            printf("%d = %d",n,i);
                            for(k = i+1;k <= j;k++)//打印我们的这个序列
                            {
                                printf(" + %d",k);
                            }
                            printf("\n");
                        }
                    }
                }


        算法二:
            定义两个数
                
                
                int l;//一个是第一个开始加的一个数
                int r;//一个是当前加的数
                int n,k;//n用来输入的数 k用来帮助打印

                for(l = 1,r = 1;l <= n/2;)
                {
                    /*
                        1)
                        当我们的和小于n的时候
                        每次让r先加1
                        在加上一个r的值

                        2)
                        如果我们的和等于n的时候,输出我们计算的式子
                        并且sum每次减去我们第一个要加的数,第一个要加的数+1

                        3)
                        如果我们的和大于这个n
                        把最左边那个数减去
                        并且第一个要加的数+1
                        注意:我们每次这个第一个要加的数+1不是为了用来重新计算
                        是为了方便我们输出式子的第一个值的
                    */
                }

                代码实现:
                int l;//一个是第一个开始加的一个数
                int r;//一个是当前加的数
                int n,k;//n用来输入的数 k用来帮助打印
                scanf("%d",&n);
                int sum = 1;//每次已经加了1
                for(l = 1,r = 1;l <= n/2;)
                {
                    if(sum < n)//和小于这个数
                    {
                        r++;//每次要加的数先加1在加上去
                        sum += r;//1 + 2
                    }
                    else if(sum == n)//找到了这个数
                    {
                        //打印出结果 
                        printf("%d = %d",n,i);
                        for(k = l+1;k <= r;k++)//打印我们的这个序列,r是保存了最后一次加的那个数的
                        {
                            printf(" + %d",k);
                        }
                        printf("\n");

                        //要找一个序列了
                        sum = sum - l;//把最前面那个数剔除我们的序列
                        l++;//把第一个数变成它后面一个
                    }
                    else    //sum > n 
                    {
                        sum = sum - l;//剔除第一个数
                        l++;//l向后加一个
                    }
                }
                





    4.求Sn = a + aa + aaa +...+ aaaa..aa(n个a)的值(选做)
        其中:
            a和n都是由键盘输入

            例子:
                输入 n = 5, a = 2
                Sn = 2 + 22 + 222 + 2222 + 22222

                a1 = 2
                a2 = 22   --->   a1*10 + a1 
                a3 = 222  --->   a2*10 + a1
                a4 = 2222 ....
                ...
                an = a(n-1)*10 + a1 

                int a,n;
                scanf("%d%d",&a,&n);

                int sn = 0;
                int an = 0;

                int i;
                for(i = 0;i<n;i++)
                {
                    an = an*10 + a;
                    sn = sn + an;
                }

                printf("%d\n",sn);









    刷题网站:

        力扣网//后面再看 程序员面试经典...

        牛客网//选择题 代码题...
            hello world ..
            去简单做一做练一练那种逻辑
            



    

        



            