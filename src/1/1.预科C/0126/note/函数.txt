0.问题的引入
    有时候,我们经常需要在一个程序中,对数组进行一个输入
    如:
        int a[10];
        for(i = 0;i < 10;i++)
        {
            scanf("%d",&a[i]);
        }


        ....
        int b[5];
        for(i = 0;i < 5;i++)
        {
            scanf("%d",&b[i]);
        }

    上面这两个代码块,功能是相同的,只有数组名和元素个数不一样
    参数不一样,代码形式是一样的,对于功能相同但是参数不一样的代码快
    我们如何重复利用这个代码?

        对于功能相同但是参数不一样的代码块,我们会使用函数来进行代码的编写
        函数  -> 重复利用代码块


1.函数
    (1)什么是函数?
        function 功能 
        函数就是完成某种功能的指令序列的封装

        在C语言中,指令必须在函数内部的

        函数实现代码复用,能够实现模块化编程
        结构化编程(模块化)主张把一个大任务分成多个功能函数来实现

            优点:
                任务分工,团队合作,提高开发效率;
                代码复用,减少程序冗余;
                提高程序可读性;
                利于调试和维护

    (2)如何设计一个函数?
        函数是一个功能实现的指令序列的封装
        函数是用来实现功能的

        例子:
            炒菜的时候,锅子就是函数
            可以用不同的食材炒出不同的菜
            并且炒菜的步骤也是有一个顺序

            食材就是我们输入的参数,成品(结果)就是炒出来的菜


        四点:
            1)明确函数的功能是什么? 要完成的是一个什么目标
                确定函数的"函数名"
                例子:
                    求一个数组的最大值
                    find_max
                
                函数名:符合C语言的标识符的规定
                一旦你确定了函数名,那么你这个函数肯定是要来实现你的功能
            
            2)完成这个目标需要哪一些条件?   输入参数
                "完成任务需要输入的资源"

                例子:
                    求一个数组的最大值

                    需要:有一个数组

            3)完成这个目标之后需要得到一个什么? 返回值
                返回值就是函数返回结果的一个类型

                例子:
                    0   没有了
                    1   半路被别人抢了
                    2   根本没下楼

                    ...
                函数的一个执行结果

            4)算法实现和代码,调试等等


        例子:
            1.求两个整数的和

                (1)明确目标
                    "求和" 求两个整数的和
                    确定函数名:sum

                (2)完成目标,需要哪些东西
                    "两个整数"
                    sum(int a,int b)

                (3)完成目标后,需要得到一个啥?
                    得到两个整数的和
                    确定返回值的类型

                    int sum(int a,int b);

                (4)函数的代码实现
                    int sum(int a,int b)
                    {
                        return a+b;
                    }

                    sum(3,4);
                    sum(5,6);

    (3)C语言中函数的语法形式

        函数的返回值类型 函数名(输入参数列表)
        {
            C语句,具体的函数的实现;
        }

        函数的返回值类型:
            return语句后面跟着的那个表达式的值的类型
                一般是一个单值类型,基本类型和指针类型

                函数也可以不带返回值: void 
                函数不指定返回值的类型的话.默认为int类型
                例子;
                        (int) main()

        函数名:合法的标识符,尽量编程规范

        输入参数列表:
                类型1 参数名1,类型2 参数名2,......

                void:表示该函数不带参数


        return:一般是在函数的最后面,只能在函数内部
                表示函数结束的意思

                return ;//函数不带返回值 
                return 表达式;//函数结束,带一个返回值,"表达式的值"
                    函数的返回值类型,具体根据return后面的类型来决定

        注意:
            函数是不能够嵌套定义的,不能在函数内部定义函数,只能定义在外面


        例子:
            求两个数的和 
            /*
                sum:求两个函数的和
                参数列表:
                    a:加数a
                    b:加数b

                返回值:int类型,两个数的和
            */
                int sum(int a,int b)
                {
                    int c = a + b;
                    return c;//return a+b;
                }

            现在函数写好了,怎么用?

    (4)函数的调用过程 很重要!!!
        函数调用:使用一个已经写好了的函数
            "执行一个功能代码/任务"

        
        1)如何调用函数?
            a.看需要完成的功能是哪一个功能,我们才能选取函数名

            b.看完成这个任务需要我们输入什么,就输入对应的值


                主调函数:调用其他函数的那个函数.比如:main()
                被调函数:被其它函数调用的那个函数 比如:sum()

                形式参数:定义函数的时候的参数 "形参"
                实际参数:调用的时候实际传入的值,"实参"

                /*
                sum:求两个函数的和
                参数列表:
                    a:加数a
                    b:加数b

                返回值:int类型,两个数的和
                */
                int sum(int a,int b)
                {
                    int c = a + b;
                    return c;//return a+b;
                }
                    

                int main()
                {
                    int a;
                    a = sum(3,4);
                }
            =======================================
            "函数调用表达式":
                函数名(实参值列表)
                函数调用表达式的值就是函数执行完之后返回的值
            ============================================

            在函数的调用过程的时候,需要指定实际参数,并且这个实际参数的值是和形参一对一对应的

            函数的形参和实参之间的关系:值传递
            "值传递":就是把实参的值传给相应的形参,再带入函数进行运算

            那到底函数的执行过程是怎么样的?
                首先当主函数运行到函数调用那一块的时候,我们就开始把
                实参的值一一传递给对应的形参,就在对应函数里面开始执行
                代码,直到函数执行完毕或者是遇到了return,就会返回到函数
                调用处

            例子:
                int abc(int a,int b)
                {
                    int s = a+b;
                    if(a > b)
                    {
                        s = 1;
                    }
                    return s;
                }

                int main()
                {
                    int s;
                    s = abc(3,4);//s  ---> 7
                }

            总结:
                (1)函数形参和实参是一个值传递,把实参的值传给了形参
                (2)主函数在执行的过程中,碰到了函数的调用,就会跳转到这个对应的
                    函数那里去执行,直到函数结束或者遇到了return,就会返回主函数
                    调用的位置,继续执行剩余的代码


    (5)函数声明
        什么是函数声明?
            就是让我们的编译器知道,在我们的这个文件中,有这么一个函数,有可能我先使用了
            但是你还不知道它怎么定义的,为了让编译器放心这个函数是存在的,就需要先对这个函数
            进行声明


            例子:
                //特此声明.xxx是我在后面使用的函数,你先别急,去后面找找就看到了
                int main()
                {
                    xxx();
                }


                xxx()
                {
                    ....;
                }

        怎么来写函数的声明?
            把函数的头部分加上 ; 就OK了,通常放在代码上面,所包含头文件的下面
            int abc(int a,int b);


        练习:
            写一个函数,求三个整数中的最大值

            注意,要按四步法来!!!

            a.明确任务的目标
                求三个整数中的最大值
                确定函数名: max3

            b.确定完成任务所需要的参数
            `   需要三个整数
                参数列表 
                    (int a,int b,int c)

            c.确定完成目标后,输出结果是什么?
                输出最大的那个整数
                int 

                int max3(int a,int b,int c);//声明

            d.完成代码实现
                int max3(int a,int b,int c)
                {
                    //具体自己去实现
                    if(a > b && a > c)
                    {
                        return a;
                    }
                    else if(b > a && b > c)
                    {
                        return b;
                    }
                    else
                    {
                        return c;
                    }
                }

                max3(1,2,3)

        关于声明的补充:
            除了有函数声明之外,很多时候我们还会对一些变量进行声明
            
        为什么要声明?
            因为我们一个程序是由很多个.c文件组成的
            有个时候可能我们在1.c里面需要用到2.c里面的东西(如:函数 变量)
            我们应该怎么办呢?
            所以这个时候我们就需要借助声明来实现这个功能

        声明的种类:
            1)变量的声明
                extern:声明外部的全局变量
                    extern 变量的类型 变量名;

            2)函数的声明:
                在本文件中,声明已经用到但是还没出现的函数;
                声明外部的函数(在别的.c文件中的函数)
                    语法:
                        extern 外部函数的头部;

                函数声明的时候,一般我们约定,可以不用带形参的名字

                    声明sum函数:
                        int sum(int a,int b);
                        //
                        int sum(int ,int );

            3)构造类型的声明(待会讲)


    (6)数组作为函数的参数
        当一个函数的参数是数组的时候
            函数声明,数组是形式参数,如何去描述这个数组呢?
                数组元素的类型 数组名[数组元素的个数]

        例子:
            1)一维数组传入函数
                int a[10];//想把数组a传到一个函数中

                xxx(int b[],int n)
                参数列表:表示接受一个数组元素是int类型的,总共有n个数组元素的数组

                xxx(a,10)//已经把这个数组a传入到函数中了
                {
                    //a[0],a[1],a[2],....a[9]
                }

            2)二维数组如何传入函数
                
                例子:
                    int a[3];//定义了一个一维数组,数组里面每个元素都是int类型,有三个

                    typeof(a) ---> int [3]

                    现在我要定义一个数组元素为a这种类型,而且有三个元素的数组b

                    数组元素类型 数组名[数组元素个数];

                    typeof(a) b[3];

                    现在我要把数组b传入到上面的函数中

                    数组元素的类型 数组名[],数组元素的个数 
                    yyy(typeof(a) b[],int n)
                    typeof(a) b[] 
                    ==> int [3] b[],int n 

                    ===> int b[][3],int n

                    yyy实际上是输入一个二维数组

                    yyy(int b[][3],int n)




        练习:
            写一个函数完成数组的输入和输出

            四步法:
                (1)明确目标:
                    确定函数名
                    输入:
                        array_input()
                        array_output()

                (2)需要的参数
                    "数组"
                    数组元素的数据类型 数组名[],数组元素的个数 
                    int b[],int n

                (3)需要的返回值
                    不需要返回值

                (4)具体的实现 \


            代码实现:
                /*
                    array_input:输入一个数组的元素
                    参数列表:
                        int b[]:数组元素的类型 
                        int n:数组元素的个数 
                    返回值:
                        void 不需要返回值
                */

                void array_input(int b[],int n)
                {
                    int i;
                    for(i = 0;i < n;i++)
                    {
                        scanf("%d",&b[i]);
                    }
                    return ;
                }

                void array_output(int b[],int n)
                {
                    int i;
                    for(i = 0;i < 10;i++)
                    {
                        printf("%d ",b[i]);
                    }
                    printf("\n");
                    return ;
                }
    

    (7)头文件
        1)什么是头文件?
            头文件是一个声明文件,他主要就是声明一个对应的.c文件中里面有的变量,函数,结构体啊等等

            头文件分为系统自带的标准库头文件如:stdio.h,math.h,stdlib.h,string.h
            一般包含的时候,是用<>括起来的
            还有一种头文件是开发者自己写的头文件,一般会有一个对应的.c文件 
                lcd.c/lcd.h 
                car.c/car.h
            一般包含的时候是用这个""引起来的

        2)""和<>的区别
            都是引用头文件
            <>:直接去系统指定的头文件库中对头文件进行查找
                linux头文件所在目录:
                    /usr/include 
            "":先从当前项目所在的文件夹中进行查找

        3)头文件的写法
            头文件文件格式:.h文件

            文件的写法:
                test.c/test.h 

                test.h:
                    #ifndef __TEST_H__
                    #define __TEST_H__

                    //用来写我们头文件需要声明的东西


                    #endif

            头文件的声明写好之后,对应函数的具体功能实现,就是在对应的.c文件中写出来

        4)如何编译多个.c文件 
            因为使用头文件之后,有多个.c文件需要进行编译
            解决方法:
                a.把main.c的内容放到头文件对应的.c文件中 
                    不太合理,因为后面可能还有别的.c文件,那你怎么办?

                b.一次性编译对应目录下所有相关的.c文件 
                    gcc 所有需要的.c文件目录(test.c main.c) -o 指定的文件名字



        练习:
            自己根据我刚刚的代码来写一个自己的.h文件 
            写一个函数判断一个数组是否升序
                有序的话返回1
                无序返回一个0

            建议大家,把自己的.c和.h文件单独用一个新的目录来保存


    使用容易出现的错误:
        1.格式不对,当公式人,直接套模板使用
            头文件不要出现#include 谁谁的头文件

        2.里面我们只用来写声明,不需要在里面进行函数的定义
            函数的定义在对应的.c文件中实现

作业:
    1.写一个函数来判断一个二维数组是否对称
        1 1 1 1
        1 1 1 1
        1 1 1 1
        1 1 1 1

        水平对称 并且 垂直对称

        二维数组的输入参考白天的练习
        切记不要出现行列都由参数决定的情况
        
        四步法:
            1)确定函数名 
                is_duichen

            2)需要输入的这个参数
                二维数组 
                is_duichen(int m,int n,int a[][n])

            3)确定返回值 
                1:对称
                0:不对称

                int is_duichen(int m,int n,int a[][n])

            4)代码实现 
                int is_duichen(int m,int n,int a[][n])
                {
                    //用两个标志位来分别确定他的水平和垂直方向上是否对称
                    int flag = 1;//垂直方向
                    int sign = 1;//水平对称

                    int i,j;//循环变量

                    //水平对称
                    //因为break只能跳出一层循环,所以外面这个循环,我们加条件限定
                    for(i = 0;i < m && sign == 1;i++)
                    {
                        for(j = 0;j < n;j++)
                        {
                            if(a[i][j] != a[i][n-1-j])
                            {
                                sign = 0;
                                break;
                            }
                        }
                    }

                    //垂直对称
                    for(j = 0;j < n && flag == 1;j++)
                    {
                        for(i = 0;i < m;i++)
                        {
                            if(a[i][j] != a[m-1-i][j])
                            {
                                flag = 0;
                                break;
                            }
                        }
                    }

                    if(flag == 1 && sign == 1)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                }





    2.写一个函数,求一个整数的二进制形式有多少个1
        4 - > 00000000 00000000 00000000 00000100   1
        3 ->
        

        算法一:
            对bit进行计数
                先求出这个数据是几个bit的
                    sizeof() 求出了字节数
                    8*字节数 ===> bit数

            1 --> 00000000 00000000 00000000 00000001
                  xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx &
                  00000000 00000000 00000000 00000001

                  只需要去判断1&x 
                    看他的值是否为真

                通过位与和位移来实现

            int bit_count(unsigned int x)
            {
                int bits = sizeof(x)*8;
                int i;
                int num = 0;//统计1的个数

                for(i = 0;i < bits;i++)
                {
                    if(x & (1<<i))
                    {
                        num++;
                    }
                }

                return num;
            }


            缺点:
                无论x的值是多少,for循环都要执行32次

            
            算法二:
                每次我们是让这个1来左移
                既然我们x是一个无符号的
                我可不可以把x进行右移,当x为0之后,就不需要在循环了

            int bit_count_v2(unsigned int x)
            {
                int num = 0;
                while(x)
                {
                    //每次移动x的位到这个1这里来计算
                    if(x & 1)
                    {
                        num++;
                    }
                    x = x >> 1;
                    //x每次往右移动一位,直到x的值为0的时候,跳出循环
                }

                return num;
            }


//每次消除原来数里面的一个1,直到把所有的1消除完就搞完了
int EJZ_1(int a) {
    int temp = 0;
    while (a!=0) 
    {
        a &= (a - 1);
        temp++;
    }
    return temp;
}


int ejz_1(int n) {
    int flag = 0;
    long long a = 0;
    if (n < 0) { a = (long long)(pow(2.0, 32.0) - llabs(n)); }
    else if(n>=0)
            a = n;

        while (a != 1) {
            if (a % 2 == 0) {//a = 2 * (a / 2);10=2*5
                a = a / 2;
                
            }
            else {
                // a = 2 * (a / 2) + 1; 5=2*2+1 
                a = (a - 1) / 2; flag++;
               
            }
        }
        return flag + 1;
    }


#include <stdio.h>
/*
find:找一个整数的二进制形式中有多少个1
参数列表
  int a:输入的int类型a
返回值：count+1

*/
int find (int a)
{
    int count = 0;
    int sum = a;
    while(sum!=1)
    {
        a  =  sum;
        if(a%2==1)
        {
            count++;
        }
        sum/=2;
    }
    return count+1;
}




















    要求:
        今天不强制必须使用头文件,但是必须要用函数来实现

        方式1:
            全部写在一个.c里面
                注意函数的声明
                每个函数都要有注释

        方式2:
            使用头文件的格式完成
            新建一个目录,把所有的.c/.h文件
            放在里面,使用多文件编译的方法来实现


    






