1.作用域
    什么是作用域?
        一个对象起作用的区域

        变量 
        函数 
        类型
        ..
        都是有属于他自己的作用域


    一个工程,是有多个.c文件的 
    作用域分为以下几种:
        整个工程作用域:
            在整个工程所有文件中都有效

        本文件作用域:
            只在对应的.c/.h文件中起作用

        函数/代码块作用域
            仅在{}内起作用

    
    (1)变量的作用域
        根据作用域的不同,分为了以下几种变量
        1)全局变量:定义在函数外部的变量
            作用域:
                在整个工程中都起作用

            例子:
                1.c里面定义了一个a
                想在2.c里面使用
                结果有bug
                "声明"
                要解决bug的话,必须要先声明这个变量
                外部声明
                    extern

        2)static修饰的全局变量
            定义在函数外部的变量,只不过这个变量前面加了一个关键字 static 
             加了这个关键字之后,全局变量的作用域就被改变了,仅在本文件内有效

             例子:
                刚刚那个1.c中我们在变量a前面加了一个static,他的作用域就被限制

        
        3)局部变量
            定义在{}内的变量
            作用域:代码块作用域
            局部变量仅在{}内可见

            例子:
                int main()
                {
                    int a = 5;
                    printf("%d\n",a);
                    if(1)
                    {
                        int b = 1024;
                        printf("%d\n",a);
                        printf("%d\n",b);
                    }
                }
                在上面这个例子中,a在main的{}内都有效
                b只在if的{}内有效 

    (2)函数的作用域
        1)整个工程作用域
                    
            例子:    
                1.c 
                    int sum(int a,int b)
                    {
                        return a+b;
                    }

                2.能不能使用？
                    要么直接在2.c中声明(外部声明)
                    要么包含1.c的头文件

        2)本文件作用域 
            用static修饰的函数,就会改变函数的作用域,仅在本文件内有效 

            编程规范:
                如果你的全局变量或者函数,不在其他文件中调用,请用static对它进行修饰

                我们把一些放在其他文件中调用的函数称做接口函数

    
    (3)构造类型的作用域
        1)本文件作用域 
            例子:
                1.c 
                    struct test
                    {
                        int a;
                        int b;
                    }; //定义了一个新类型 叫做 struct test ,它里面有两个int类型的数据

                2.c 
                    假设我想在2.c中调用它怎么办?
                        外部声明 不行 
                    办法:在2.c再写一个一模一样的

        2)代码块作用域 
            {
                struct test
                {
                    int a;
                    int b;
                }; //定义了一个新类型 叫做 struct test ,它里面有两个int类型的数据
            }

            //在花括号外就无法使用这个类型


        练习:
            int a = 5;
            int main()
            {
                printf("%d\n",a);
                int a = 6;
                if(1)
                {
                    int a = 7;
                    printf("%d\n",a);
                }

                printf("%d\n",a);
            }

            同名不要紧
            只要域不同
            具体是哪个
            就近往上找



2.生存期
    什么是生存期?
        是指一个对象从生到死的瞬间
    
    1)随文件的持续性:
        只要文件系统一直存在,那么这个对象就一直存在
    
        如:
            代码,文件 
    
    2)随程序持续性/进程持续性:
        进程:正在进行/运行的程序
        是指这个对象,在进程启动的时候,他就存在啦,并且一直持续到程序消亡.
        进程启动的时候,CPU会给那些"随进程持续"的对象,分配一个空间,当进程
        结束的时候收回地址空间

        如:
            全局变量 函数 static修饰的局部变量

    3)随函数/代码块持续性
        指这个对象,只有运行它属于的那一块代码的时候,它才被分配空间
        当代码块执行完成的时候它的空间就会被自动收回

        如:
            普通的局部变量

    ======================================
    初始化:
        定义一个对象的时候,我们给他一个初值,
        //
        给对象分配了地址,再给它进行赋值

    初始化语句:
        int a = 5;
        //只会在给对象分配空间的时候,才会执行一次

        a = 5;//赋值语句


        练习:
            void f()
            {
                int a = 7;
                a++;
                printf("%d\n",a);
            }

            int main()
            {
                f();//8 a的生存期是随代码块持续性,只有代码块被调用的时候,他才会被分配空间
                f();//8
            }


            ----------------------------
            void f()
            {
                static int a = 7;
                a++;
                printf("%d\n",a);
            }


            main()
            {
                f();//8
                f();//9
            }


3.static在C语言的作用
    (1)static用于修饰全局变量和函数的时候.
    作用:被修饰的全局变量和函数的作用域仅在本文件有效

    (2)static用于修饰局部变量的时候,
    作用:被修饰的局部变量的生存期变成随进程持续性
        我们这个变量只会被初始化一次




总结:
    1.定义函数记得函数的四个步骤
        S1:确定函数名 
        S2:确定输入的参数
        S3:确定完成目标后返回的那个值
        S4:算法实现 

    2.函数的调用过程 
        形参和实参
        值传递:把实际参数的值传递给形式参数

    3.函数的声明 
        记得后面要加分号

    4.头文件的作用
            头文件                   对应的.c文件 
        内容：  需要声明的函数,变量         写头文件里面声明的函数
                一些类型                    的一个具体算法实现

        特别是头文件按格式来写
        编译的时候需要编译多个.c文件(C程序组成)

    5.递归
        中心思想:
            递归是解决问题的时候又碰到了类似的问题,所以才会用上递归

        这不是C语言的特有的东西,它是数学上的一种思想(数据结构:二叉树 图:迪杰斯特拉 DFS BFS)
        
    6.作用域和生存期
        知道了代码中的一些变量 函数 代码块的特殊含义



    

    


                


