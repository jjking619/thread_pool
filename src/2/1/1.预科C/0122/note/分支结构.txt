0.C语言的三大结构
    顺序结构
        语句从上往下,从左至右的执行
        一条一条语句的执行

        int a;
        a = 3;
        int b = a;

    分支结构(选择结构)
        if()    switch()

    循环结构
        goto,while(),do while(),for()


1.if()语句
    if语句有三种基本形式
        (1) 
            if(表达式)
                语句;

            只要"表达式"的值为真(非0),那么就去执行"语句"
            如果"表达式"的值为假(0),那么就会跳过该"语句"不去执行

            "表达式":任意一种C语言合法的表达式都可以
                    任何表达式都是有一个确定的值
                    比如:
                        a+b 4+5 100 ...

            "语句":分为单语句和复合语句
                单语句:只有一个分号的语句
                    例子:
                        if(a > b)
                            a = 3;

                复合语句:用{}括起来的语句
                    例子:
                        if(a > b)
                        {
                            a = 1;
                            b = 2;
                        }

                例子:
                    int a = 400,b =300;
                    int c;
                    if(a < b)
                        c = a;      //不会执行
                        a = b;      //会执行
                        b = a;      //会执行
                    //a:300  b:300

                    if(a < b)
                    {
                        c = a;      //不会执行
                        a = b;      //不会执行
                        b = a;      //不会执行
                    }
                
                编程建议:
                    不管if后面是单语句还是复合语句,都加上一个{}括起来这个语句

                    if(表达式)
                    {
                        语句;
                    }
        
        (2)
            if(表达式)
            {
                语句1;
            }
            else
            {
                语句2;
            }
            如果表达式的值为真(非0)的时候,就执行语句1
            否则(表达式的值为假(0))就去执行语句2 


            例子:
                int a,b;
                if(5 > 3)
                {
                    a = 7;
                    b = 8;
                }
                else
                {
                    a = 5;
                    b = 6;
                }
                //a: 7  b: 8


                if(5 > 3)
                {
                    a = 7;
                    b = 8;
                }
                else
                    a = 5;
                    b = 6;      //这个语句还会执行一次

            编程建议:
                不管if else后面是不是复合语句,都要在后边加上一对{}


        (3)
            if(表达式1)
            {
                语句1;
            }
            else if(表达式2)
            {
                语句2;
            }
            ....
            else
            {
                语句n;
            }

            等价于:
            if(表达式1)
            {
                语句1;
                
            }
            else
            {
                if(表达式2)
                {
                    语句2;
                }
                else
                {
                    if(表达式3)
                    {
                        语句3;
                    }
                    else
                    {
                        ....
                        if(表达式m)
                        {

                        }
                        else
                        {
                            语句n;
                        }
                    }
                }
            }

            先判断表达式1的值,如果表达式的值为真,那么就执行语句1
                如果表达式1的值为假,那么就去判断"表达式2"的值 
                    如果表达式2的值为真,那么就去执行语句2
                    否则就去判断表达式3的值
                    ...一直判断下去,直到所有的条件都为假
                    执行语句n


            例子:
                根据下面的代码片段,来给出number和cost之间关系
                if (number > 500)
                {
                    cost = 0.15;
                }
                else if(number > 300)
                {
                    cost = 0.10;
                }
                else if(number > 100)
                {
                    cost = 0.075;
                }
                else if(number > 50)
                {
                    cost = 0.05;
                }
                else 
                    cost = 0;

    
    练习:
        1.从键盘上面输入两个数,按从大到小的顺序输出
            S1:定义两个数 从键盘输入 
            S2:比较大小
            S3:从大到小进行输出


            编译的指令:
                gcc 需要编译的文件名(xxx.c)
                生成a.out的文件
                执行: ./a.out 

                gcc xxx.c -o xxx(你需要指定可执行文件的文件名)
                gcc test.c -o test 
                可执行文件:test
                ./test




        2.从键盘输入三个整数,判断它们是否能够组成一个三角形
            能组成三角形的三条边满足什么条件?
                任意两边之和大于第三边


            S1:输入三条边,从键盘输入 整数
            S2:判断是否能够组成三角形 
            S3:输出我们的结果

            int main()
            {
                //S1:从键盘输入输入三条边,整数
                int a,b,c;
                scanf("%d%d%d",&a,&b,&c);

                //S2:判断是否能够组成三角形 
                if((a + b > c) && (a + c > b) && (b + c > a))//组成三角形的条件
                {
                    printf("YES\n");
                }
                else
                {
                    printf("NO\n");
                }
            }


    有几个地方需要注意一下
        (1)语句:    C语言中的指令
            表达式语句: 表达式 + 分号(;)
                a = 3  ->  赋值表达式
                a = 3;  -> 赋值语句

            if语句: 分支语句
            循环语句:

            return语句


        (2)条件
            并列条件:会一一去判断
                if(条件1)
                {}
                if(条件2)
                {}

                ...
            互斥条件:有你没我 有我没你
                if(条件1)
                {

                }
                else
                {
                    //条件2 ===> !条件1 
                }

        (3)if语句的嵌套
            "条件里面分条件"
            在if语句中又包含一个或者多个if语句

            if(xxxx) 
            if() 语句1 
            else 语句2
            else 
            if() 语句3 
            else 语句4
            关键:
                else的匹配问题
                    else总是和它上面的最近的并且没有被匹配的if进行配对

                千万要注意编程规范

            if(xxxx)
            {
                if()
                {
                    语句1;
                }
                eles
                {
                    语句2;
                }
            }
            else
            {
                ....
            }
    

    练习:
        从键盘中输入一个十六进制的字符(0-9 a-f A-F),输出其相应的数值 
            0  ====>  0
            a  ====>  10
            ... 
            //既要输入一个字符,还要输出一个整数
            char ch;
            int d;
            scanf("%c",&ch);

            if(ch == '0')
            {
                d = 0;
            }
            else if(ch == '1')
            {
                d = 1;
            }
            ....
            else if(ch == 'f' || ch == 'F')
            {
                d = 15;
            }

            上面这种情况,好像是对所有的可能进行列举!!!!

2.switch语句(开关语句)
    语法:
        switch(表达式)
        {
            case 常量/常量表达式1:(这里是冒号!!!!)
                语句1;
            case 常量/常量表达式2:
                语句2;
            ....
            case 常量/常量表达式n:
                语句n;
            default:
                语句m;
        }

        规则:
            拿这个"表达式"的值和case后面的"常量/常量表达式"的值进行匹配
            一旦匹配成功,那么就会执行case 后面的语句,
            而且会一直往下执行,直到遇到了一个break为止
            如果没有一个case后面的"常量/常量表达式"能够正确匹配,
            那么就会去执行default后面的语句


                例子:
                    switch(a)
                    {
                        default:
                            b = 0; 
                        case 1:
                            b = 2;
                        case 2:
                            b = 3;
                        case 3:
                            b = 4;
                     
                    }
                    假设a的值是1,请问b的值

            注意事项:
                1)switch后面的表达式必须是一个整数值(整型,字符型,枚举类型)
                2)case后面的常量/常量表达式的值也必须是一个整数值,而且每一个值
                    都不一样
                3)各个case和default出现的次序不影响匹配结果,一旦匹配成功,就会一直往下
                    执行,直到碰到break或者是switch语句结束
                4)break的作用,就是为了退出我们的switch语句
                    例子:
                            switch(a)
                            {
                                case 1:
                                    printf("1");
                                case 2:
                                    printf("2");
                                case 3:
                                    printf("3");
                                case 4:
                                    printf("4");                           
                                default:
                                    printf("5");
                            }
                            //当a=5的时候 ,结果是什么 5
                            //当a = 3的时候 结果:345

                            switch(a)
                            {
                                default:
                                    printf("5");
                                case 1:
                                    printf("1");
                                case 2:
                                    printf("2");    
                                case 3:
                                    printf("3");
                                case 4:
                                    printf("4");                           
                            }
                            //a=5的时候,    51234
                            
                    5)case后面需要执行的语句,是可以省略的
                        多个case匹配的值可以共用一个语句

                        例子:
                            switch(a)
                            {
                                case 1:
                                case 2:
                                case 3:
                                    printf("小");
                                    break;
                                case 4:
                                case 5:
                                case 6:
                                    printf("大");
                                    break;
                                default:
                                    break;
                            }


    练习:
        从键盘上获取一个成绩(int),把这个成绩按照对应的等级输出
            A  [90-100]     9,10
            B  [80-90]      8
            C  [70-80]      7
            D  [60-70]      6
            E  [0-60]       0-5

            思路:
                switch后面对应的值必须是一个确定的值而不是一个范围
                那0-100有101个确定的值
                为了更加简洁明了,我们直接对这个成绩进行取整

            代码实现:
                //S1:先定义一个整数,来获取键盘输入的成绩
                int score;
                scanf("%d",&score);

                //S2:对这个成绩进行取整
                int d = score/10;

                //S3:对这个成绩进行判断
                switch(d)
                {
                    case 10:
                    case 9:
                        printf("A\n");
                        break;
                    case 8:
                        printf("B\n");
                        break;
                    case 7:
                        printf("C\n");
                        break;
                    case 6:
                        printf("D\n");
                        break;
                    case 5:
                    case 4:
                    case 3:
                    case 2:
                    case 1:
                    case 0:
                        printf("E\n");
                        break;
                    default:
                        printf("您输入的成绩有误!\n");
                        break;
                }

                编程建议:   
                    每一个case后面的语句都记得最后加上一个break


        练习:
            输入一个日期(y,m,d),求该日期到那一年的年末还有多少天?
                2024 1 22
                1 2 3 4 5 6 7 8 9 10 11 12   一月份已经过了22天
                    剩余年份 = 每月时间相加 减去 已经过了日子
                        有2月 需要考虑闰年还是平年

                2024 6 18
                6 7 8 9 10 11 12    六月份过去了18天

                2024 11 11 
                11 12   十一月已经过去了11天

                如果求该日子到年末还有多少天,只需要看到年末还有多少个月(包括当月)
                只需要把剩余的月份日子相加 再减去当月已经过去的日子就OK

                特殊情况:
                    判断 2月份 是29天还是28天

            switch()


            int main()
            {
                int y,m,d;//定义当前输入的年月日
                scanf("%d%d%d",&y,&m,&d);

                int days;//距离年末的日子

                //判断是平年还是闰年,单独放在二月份那里来操作

                switch(m)//判断当前是哪个月就OK了,就知道还剩余多少个月
                {
                    case 1:
                        days += 31;
                    case 2:
                        //判断是平年还是闰年
                        days += 28;//先加28天,如果是闰年的话,再多加一天
                        if(y%400==0 || year%4==0 && y%100!=0)
                        {
                            days++;//是闰年的话,二月份要多一天
                        }
                    case 3:
                        days += 31;
                    case 4:
                        days += 30;
                    case 5:
                        days += 31;
                    case 6:
                        days += 30;                    
                    case 7:
                        days += 31;
                    case 8:
                        days += 31;                    
                    case 9:
                        days += 30;
                    case 10:
                        days += 31;                    
                    case 11:
                        days += 30;
                    case 12:
                        days += 31;
                        break;                    
                    default:
                        printf("该日子不合理");
                        break; 
                }
                //减去当前这个月已经过了的日子
                days -= d;

                printf("当前距离年末还有%d天\n",days);

                return 0;
            }



作业:
    1.从键盘输入一个英文字母(a-z A-Z)
        如果输入的是大写字母.就输出它的小写字母
        如果输入的是小写字母,就输出他的大写字母

        //S1 输入一个字符 判断它是不是一个英文字母
                ASCII/ switch 
                A:65   a:97
                用if来判断是不是一个英文字母
                同一个字母: 小写 = 大写 + 32
            字母的范围
                A-Z  a-z
                假设我们输入一个ch 
                (ch >= 'A' && ch <= 'Z') 
                (ch >= 'a' && ch <= 'z')

        代码实现:
            int main()
            {
                //S1:输入一个字符 
                char ch;
                printf("请输入一个字符:\n");
                scanf("%c",&ch);

                //S2:判断它是不是一个英文字母 ,是大写还是小写
                if(ch >= 'A' && ch <= 'Z')//大写字母
                {
                    ch = ch + 32;//改变它的值找到对应ASCII码
                }
                else if(ch >= 'a' && ch <= 'z')//小写字母
                {
                    ch = ch - 32;
                }
                else
                {
                    printf("您输入的字符不是一个字母\n");
                }

                printf("转变后的字符为:%c\n",ch);
            } 



    2.计算一下你活过了多少天了(选做)     循环
        有两个日子
        第一个日子是出生日期
        第二个日子是当前日期

        2002 2 2    - 2002年尾 是不是有一段不是一整年的数字

        2003年初 -2023年尾(闰年+366 平年+365)
            d + 365/d + 366   重复的代码就是用循环来实现

        2024 1 23    --->2024的年初到当前日子也有一段不是一整年的数字   



        代码实现:
            //S1:定义所需要的数据 出生年月日 当前年月日 日子的总和
            int c_y,c_m,c_d,y,m,d,days = 0;
            printf("请输入您的出生日期:\n");
            scanf("%d%d%d",&c_y,&c_m,&c_d);
             printf("请输入当前日期:\n");
            scanf("%d%d%d",&y,&m,&d);      


            //S2:求出生那天到那年年末的日子
            switch(c_m)
            {
                case 1:
                    days += 31;
                case 2:
                    //判断是平年还是闰年
                    days += 28;//先加28天,如果是闰年的话,再多加一天
                    if((c_y%400==0) || (c_y%4==0 && c_y%100!=0))
                    {
                        days++;//是闰年的话,二月份要多一天
                    }
                case 3:
                    days += 31;
                case 4:
                    days += 30;
                case 5:
                    days += 31;
                case 6:
                    days += 30;                    
                case 7:
                    days += 31;
                case 8:
                    days += 31;                    
                case 9:
                    days += 30;
                case 10:
                    days += 31;                    
                case 11:
                    days += 30;
                case 12:
                    days += 31;
                    break;                    
                default:
                    printf("该日子不合理");
                    break; 
            }   
            days = days - c_d;//已经把出生那年到年末的时间计算好了


            //S3:求出生那一年的后一年 到今年的前一年的日子总合 
            c_y++;//出生那一年的后一年
            for(int i = c_y;i < y;i++)
            {
                //如果是闰年,就加366天
                if((i%400==0) || (i%4==0 && i%100!=0))
                {
                    days = days + 366;
                }
                else
                {
                    days = days + 365;
                }
            }


            //S4:求今年年初到现在这个日子的时间 十二月也不是计算在其中的
            switch(m - 1)
            {
                case 11:
                    days += 30;
                case 10:
                    days += 31;
                case 9:
                    days += 30;
                case 8:
                    days += 31;
                case 7:
                    days += 31;
                case 6:
                    days += 30;
                case 5:
                    days += 31;
                case 4:
                    days += 30;
                case 3:
                    days += 31;
                case 2:
                    //判断是平年还是闰年
                    days += 28;//先加28天,如果是闰年的话,再多加一天
                    if((y%400==0) || (y%4==0 && y%100!=0))
                    {
                        days++;//是闰年的话,二月份要多一天
                    }
                case 1:
                    days += 31;
                    break;
                default:
                    break;
            }

            








