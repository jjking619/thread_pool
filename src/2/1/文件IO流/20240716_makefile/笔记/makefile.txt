1.makefile 
    makefile是一个能够实现自动化编译工程文件的脚本。当执行make命令时候就会找到相应的makefile文件，根据制定的规则去生成文件。
    make    --> 没有指定文件名，则默认生成第一个目标文件。 
    make target -->指定了文件名，则对应生成这个target 

    makefile 执行命令的格式： 
    目标文件 : 依赖文件列表 
    <TAB>cmd1 
    <TAB>cmd2 

    比如：         
    main : 1.c 2.c 
        gcc 1.c 2.c -o main 

    在makefile里面，我们可以定义自己的变量，且变量是没有类型的，通常当作字符串来表示。
    给变量赋值。通常有以下几种方式：
        := 简单赋值,"就地赋值" 
        = 递归赋值，"向后展开赋值"  --> A = $B    后面只要B的值发生改变，那么A的值也会跟着改变   
        += 追加赋值, "在原内容之后添加 以空格隔开"
        ?= 条件赋值,当变量没有定义或者没有值的时候，才能赋值  

    引用变量: $(变量名) 

    四种赋值的用法：
        (1)简单赋值 
            B := $(A) //error,A没有定义 
            A := "123" //right 
        (2)递归赋值    
            C = $(D) //right  因为变量D在后面的程序有定义 
            D := "123"
        (3)追加赋值     在赋值符号的右边不加$的都是字符串
            A := 1.c
            A += 2.c  //A变量里面的内容为 "1.c 2.c"
        (4)条件赋值  当变量没有定义或者没有值的时候，才能赋值 
            A := 123 
            A ?= 456 //A的内容： 123 

练习：把昨天的链式栈生成静态库再调用  用makefile去执行  

自动变量  make内置的变量  make赋予这些变量有特殊的含义 
    $* 不包含拓展名的文件名称 
    $@ 目标文件的完整名称 
    $+ 所有的依赖文件，以空格隔开，可能里面会有重复的依赖名字  
    $^ 所有不重复的依赖文件，以空格隔开   
    $< 第一个依赖文件的名称  
    $? 所有时间戳比目标文件晚的依赖文件，以空格隔开 

makefile 允许定义并且调用函数，自定义函数： 
    $(函数名 函数参数列表) 

    内置函数： 
        (1)wildcard：文件名展开函数，展开成一列所有符合其参数的文件名，文件名中间会以空格隔开，返回这个字符串 
            wildcard 这个函数只带一个参数，指定文件名的通配方式 
            eg: 
                SRC := $(wildcard ./*.c)
                SRC += $(wildcard ./src/*.c) 
        (2)patsubst:模式字符串替换函数 
            $(patsubst <from>,<to>,<text>) 
            eg: 
              $(patsubst %.c,%.o,"1.c 2.c 3.c")  ==> "1.o 2.o 3.o" 
        注意： 
            这两个函数只是可以得到.c或者.o字符串，但是并没有生成.c文件或者.o文件  
            * 通配任意字符  
            %  通配任意字符，范围只能本次make过程中所有出现过的变量        
        
        

    